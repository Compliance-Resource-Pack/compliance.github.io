/* global Vue, NAME */
/* eslint no-multi-str: 0 */

try {
  let NAME // eslint-disable-line
} catch (_e) {}
NAME = 'Faithful Mods' // eslint-disable-line

export default {
  name: 'zip-options',
  components: {
    "clear-database": () => import("./clearDatabase.js"),
  },
  template: `
    <div id="zipOptions">
      <h4 class="my-3">
        <label for="aoe">Advanced options </label> <input id="aoe" type="checkbox" v-model="advancedOptionsEnabled" />
      </h4>
      <div v-show="advancedOptionsEnabled" id="advancedOptions" class="card card-body auto-flex mb-4">
        <div class="mx-1">
          <label for="compressionSelect" class="block pb-1">Compression level</label>
          <select id="compressionSelect" class="form-control custom-select fancy-card-1x" v-model="compressionChosen">
            <template v-for="(ct, ctindex) in compressionTypes">
              <optgroup :label="ct" :key="ct">
                <option
                  v-for="cl in compressionLevels.slice(!!ctindex ? 1 : 0, !ctindex ? 1 : compressionLevelsAvailable)"
                  :key="cl.value"
                  :value="cl.value"
                  :selected="cl.value == compressionChosen"
                >
                  {{ cl.label }}
                </option>
              </optgroup>
            </template>
          </select>
        </div>
        <div class="mx-1">
          <label for="archiveName" class="block pb-1">Archive name</label>
          <input
            type="text"
            autocomplete="false"
            name="archiveName"
            :class="{ empty: !archiveName.trim() }"
            class="form-control fancy-card-1x"
            v-model="archiveName"
            id="archiveName"
            placeholder="Leave empty to generate a unique name"
          />
        </div>
        <clear-database class="mx-1" />
      </div>
    </div>
  `,
  data() {
    return {
      advancedOptionsEnabled: false,
      compressionDefault: 7,
      compressionChosen: 7, // 7 is default compression for ZIP archives
      compressionLevelsAvailable: 10,
      compressionTypes: ['STORE', 'DEFLATE'],
      specialCompressionLabels: {
        0: 'No compression',
        1: 'Best speed',
        7: 'Recommended',
        9: 'Best compression'
      },
      archiveName: ''
    }
  },
  computed: {
    chevron() {
      return 'fa-caret-' + (this.advancedOptionsEnabled ? 'up' : 'down')
    },
    compressionLevels() {
      const result = []
      for (let i = 0; i < this.compressionLevelsAvailable; ++i) {
        result.push({
          value: i,
          label: (i) in this.specialCompressionLabels ? i + ` (${this.specialCompressionLabels[i]})` : String(i)
        })
      }

      return result
    },
    compressionTypeChosen() {
      return this.compressionTypes[(this.compressionLevelChosen > 0) * 1]
    },
    compressionLevelChosen() {
      return this.advancedOptionsEnabled ? this.compressionChosen : this.compressionDefault
    },
    zipOptions() {
      const result = {
        type: 'blob',
        comment: 'Resource pack generated by ' + NAME,
        compression: this.compressionTypeChosen
      }

      if (this.compressionTypeChosen === this.compressionTypes[1]) { // if DEFlATE compression chosen
        result.compressionOptions = {
          level: this.compressionLevelChosen
        }
      }

      return result
    },
    customArchiveName() {
      return (this.advancedOptionsEnabled && this.archiveName !== '') ? this.archiveName : undefined
    }
  },
  watch: {
    archiveName(newValue, oldValue) {
      if (oldValue !== newValue) {
        const changed = newValue.trim()
        if (changed !== newValue) {
          this.archiveName = changed
        }
      }
    }
  },
  mounted() {
    this.$root.$refs.zipOptions = this
  }
}
